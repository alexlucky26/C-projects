name: C++ CI

on:
  push:
    branches: [main, bayan]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install tools
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake ninja-build g++

    - name: Setup vcpkg
      run: |
        git clone https://github.com/Microsoft/vcpkg.git
        ./vcpkg/bootstrap-vcpkg.sh
        echo "VCPKG_ROOT=$GITHUB_WORKSPACE/vcpkg" >> $GITHUB_ENV

    - name: Install dependencies
      run: |
        ./vcpkg/vcpkg install \
          boost-filesystem \
          boost-system \
          boost-program-options \
          boost-crc \
          boost-algorithm

    - name: Build
      run: |
        cmake -B build -S . \
          -DCMAKE_TOOLCHAIN_FILE=$GITHUB_WORKSPACE/vcpkg/scripts/buildsystems/vcpkg.cmake \
          -DWITH_GOOGLE_TEST=ON
    - name: Build Release
      run: |
        cmake --build build --config Release

    - name: Create DEB package
      run: |
        cmake --build build --target package

    - name: Verify artifacts
      run: |
        ls -la build/
        [ -f build/bayan ] || exit 1                
        [ -f build/*.deb ] || exit 1

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: |
          build/bayan
          build/*.deb

    - name: Test
      run: |
        cd build
        ctest --output-on-failure

    - name: Upload to GitHub Release
      if: github.ref == 'refs/heads/main'
      uses: softprops/action-gh-release@v2
      with:
        files: |
          build/bayan
          build/*.deb
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Find .deb file
      id: find_deb
      run: |
        DEB_FILE=$(find build -name "bayan-0.0.*-Linux.deb" | head -n 1)
        if [[ -z "${DEB_FILE}" ]]; then
          echo "Error: .deb file not found!"
          exit 1
        fi
        echo "DEB_FILE=${DEB_FILE}" | tee output.txt
        echo "DEB_FILE=${DEB_FILE}" >> $GITHUB_OUTPUT
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.PAT }}
      with:
        tag_name: ${{ github.run_number }}
        release_name: Release ${{ github.run_number }}
        draft: false
        prerelease: false
    - name: Upload Release Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.PAT }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ steps.find_deb.outputs.DEB_FILE }}
        asset_name: bulk-0.0.${{ github.run_number }}-Linux.deb
        asset_content_type: application/vnd.debian.binary-package